marathonTasks = JSON.parse(marathonTasks);
marathonApps = JSON.parse(marathonApps);
atlasAcls = JSON.parse(atlasAcls);

config.println("global");
config.println("    log /dev/log    local0");
config.println("    log /dev/log    local1 notice");
config.println("    chroot /var/lib/haproxy");
config.println("    stats socket /run/haproxy/admin.sock mode 660 level admin");
config.println("    stats timeout 30s");
config.println("    user root");
config.println("    group root");
config.println("    daemon");
config.println("");
config.println("    # Default SSL material locations");
config.println("    ca-base /etc/ssl/certs");
config.println("    crt-base /etc/ssl/private");
config.println("");
config.println("    # Default ciphers to use on SSL-enabled listening sockets.");
config.println("    # For more information, see ciphers(1SSL).");
config.println("    ssl-default-bind-ciphers kEECDH+aRSA+AES:kRSA+AES:+AES256:RC4-SHA:!kEDH:!LOW:!EXP:!MD5:!aNULL:!eNULL");

config.println("");
config.println("");

config.println("defaults");
config.println("    log     global");
config.println("    mode    http");
config.println("    option  httplog");
config.println("    option  httpclose");
config.println("    option  forwardfor");
config.println("    option  dontlognull");
config.println("    timeout connect 5000");
config.println("    timeout client  50000");
config.println("    timeout server  50000");
config.println("    errorfile 400 /etc/haproxy/errors/400.http");
config.println("    errorfile 403 /etc/haproxy/errors/403.http");
config.println("    errorfile 408 /etc/haproxy/errors/408.http");
config.println("    errorfile 500 /etc/haproxy/errors/500.http");
config.println("    errorfile 502 /etc/haproxy/errors/502.http");
config.println("    errorfile 503 /etc/haproxy/errors/503.http");
config.println("    errorfile 504 /etc/haproxy/errors/504.http");

config.println("");
config.println("");

// configure stats
config.println("listen stats :1936");
config.println("    mode http");
config.println("    stats enable");
config.println("    stats hide-version");
config.println("    stats realm Haproxy\ Statistics");
config.println("    stats uri /");


var ports = getPortsIn(marathonApps.apps);

for (var x in ports){
    var port = ports[x];
    config.println("");
    config.println("");
    config.println("");
    config.println("frontend in_"+port);
    config.println("    bind *:"+port);

    apps = getAppsInPort(port);

    
    // build acls 

    for (var s in apps){
        var app = apps[s];

        var acl = getAclFrom(app);
        
        if (acl === null) continue;
        
        config.println("");
        config.print("    acl ");
        config.print("has_");
        config.print(app.id.replace("/",""));
        config.print("_");
        config.print(""+port);        
        config.print(" ");
        config.println(acl);

        config.print("    use_backend ");
        config.print(app.id.replace("/",""));
        config.print("_");
        config.print(""+port);  
        config.print("_cluster");
        config.print(" if has_");
        config.print(app.id.replace("/",""));
        config.print("_");
        config.println(""+port);   
        config.println("");
        
    }
    
    // build backends
    for (var s in apps){
        var app = apps[s];

        var acl = getAclFrom(app);

        if (acl === null) continue;
        
        config.println("");
        config.print("backend ");
        config.print(app.id.replace("/",""));
        config.print("_");
        config.print(""+port);  
        config.println("_cluster");
        
        config.println("    balance roundrobin");
        
        var tasks = getTasksIn(app);
        var seq = 1;
        for (var e in tasks){
            var task = tasks[e];
        
            var equivalentPort = getEquivalentPortFrom(task,app,port);
            config.print("    server ");
            config.print( app.id.replace("/","") );
            config.print("-");
            config.print(""+port);
             config.print("-");
            config.print(''+seq);
            config.print(" ");
            config.print(task.host);
            config.print(":");
            config.print(''+equivalentPort);
            config.println(" check");
            seq++;
        }
    }

}

function getAclFrom(app){
    
    for (var x in atlasAcls){
        if (atlasAcls[x].appId == app.id) {
            return atlasAcls[x].acl; 
        }
    }
    return null;
}


// retrive equivalent port from service
function getEquivalentPortFrom(task,app,port){
  var portsApp = getPortsFrom(app) ;
  var index = portsApp.indexOf(port);
  return task.ports[index];
}


// retrive tasks in app
function getTasksIn(app){
    var tasks = [];
    for (var x in marathonTasks.tasks){
        var task = marathonTasks.tasks[x];
        if (task.appId == app.id){
            tasks.push(task);
        }
    }
    return tasks;    
}

// retrive apps in port
function getAppsInPort(port){
    var apps = [];
    for (var x in marathonApps.apps){
        var app = marathonApps.apps[x];
        var appPorts = getPortsFrom(app);
        
        if (appPorts.indexOf(port) != -1){
            apps.push(app);
        }
    }
    return apps;
}


// return unique ports in apps
function getPortsIn(apps){
    var ports = [];
    
    for (var x in apps){
        var app = apps[x];
        var appPorts = getPortsFrom(app);
        
        // add appPorts in ports
        ports.push.apply(ports, appPorts);
    }
    
    // filter duplicate ports
    ports = ports.filter(onlyUnique);
    return ports;
}

// filter function for array uniqueness
function onlyUnique(value, index, self) { 
    return self.indexOf(value) === index;
}

// return ports balancer from app 
function getPortsFrom(app){
    var portsMapping = app.container.docker.portMappings;
    
    var ports = [];
    
    for (var p in portsMapping){
        var portMapping = portsMapping[p];
        var containerPort = portMapping.containerPort;
        ports.push(containerPort);
    }
    
    return ports;
}